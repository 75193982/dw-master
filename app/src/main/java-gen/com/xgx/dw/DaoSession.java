package com.xgx.dw;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.xgx.dw.UserBean;
import com.xgx.dw.TransformerBean;
import com.xgx.dw.SpotPricingBean;
import com.xgx.dw.StoreBean;
import com.xgx.dw.PricingBean;
import com.xgx.dw.SearchDlLog;

import com.xgx.dw.UserBeanDao;
import com.xgx.dw.TransformerBeanDao;
import com.xgx.dw.SpotPricingBeanDao;
import com.xgx.dw.StoreBeanDao;
import com.xgx.dw.PricingBeanDao;
import com.xgx.dw.SearchDlLogDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userBeanDaoConfig;
    private final DaoConfig transformerBeanDaoConfig;
    private final DaoConfig spotPricingBeanDaoConfig;
    private final DaoConfig storeBeanDaoConfig;
    private final DaoConfig pricingBeanDaoConfig;
    private final DaoConfig searchDlLogDaoConfig;

    private final UserBeanDao userBeanDao;
    private final TransformerBeanDao transformerBeanDao;
    private final SpotPricingBeanDao spotPricingBeanDao;
    private final StoreBeanDao storeBeanDao;
    private final PricingBeanDao pricingBeanDao;
    private final SearchDlLogDao searchDlLogDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userBeanDaoConfig = daoConfigMap.get(UserBeanDao.class).clone();
        userBeanDaoConfig.initIdentityScope(type);

        transformerBeanDaoConfig = daoConfigMap.get(TransformerBeanDao.class).clone();
        transformerBeanDaoConfig.initIdentityScope(type);

        spotPricingBeanDaoConfig = daoConfigMap.get(SpotPricingBeanDao.class).clone();
        spotPricingBeanDaoConfig.initIdentityScope(type);

        storeBeanDaoConfig = daoConfigMap.get(StoreBeanDao.class).clone();
        storeBeanDaoConfig.initIdentityScope(type);

        pricingBeanDaoConfig = daoConfigMap.get(PricingBeanDao.class).clone();
        pricingBeanDaoConfig.initIdentityScope(type);

        searchDlLogDaoConfig = daoConfigMap.get(SearchDlLogDao.class).clone();
        searchDlLogDaoConfig.initIdentityScope(type);

        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);
        transformerBeanDao = new TransformerBeanDao(transformerBeanDaoConfig, this);
        spotPricingBeanDao = new SpotPricingBeanDao(spotPricingBeanDaoConfig, this);
        storeBeanDao = new StoreBeanDao(storeBeanDaoConfig, this);
        pricingBeanDao = new PricingBeanDao(pricingBeanDaoConfig, this);
        searchDlLogDao = new SearchDlLogDao(searchDlLogDaoConfig, this);

        registerDao(UserBean.class, userBeanDao);
        registerDao(TransformerBean.class, transformerBeanDao);
        registerDao(SpotPricingBean.class, spotPricingBeanDao);
        registerDao(StoreBean.class, storeBeanDao);
        registerDao(PricingBean.class, pricingBeanDao);
        registerDao(SearchDlLog.class, searchDlLogDao);
    }
    
    public void clear() {
        userBeanDaoConfig.getIdentityScope().clear();
        transformerBeanDaoConfig.getIdentityScope().clear();
        spotPricingBeanDaoConfig.getIdentityScope().clear();
        storeBeanDaoConfig.getIdentityScope().clear();
        pricingBeanDaoConfig.getIdentityScope().clear();
        searchDlLogDaoConfig.getIdentityScope().clear();
    }

    public UserBeanDao getUserBeanDao() {
        return userBeanDao;
    }

    public TransformerBeanDao getTransformerBeanDao() {
        return transformerBeanDao;
    }

    public SpotPricingBeanDao getSpotPricingBeanDao() {
        return spotPricingBeanDao;
    }

    public StoreBeanDao getStoreBeanDao() {
        return storeBeanDao;
    }

    public PricingBeanDao getPricingBeanDao() {
        return pricingBeanDao;
    }

    public SearchDlLogDao getSearchDlLogDao() {
        return searchDlLogDao;
    }

}
